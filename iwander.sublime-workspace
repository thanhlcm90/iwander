{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"vali",
				"validateYear"
			],
			[
				"val",
				"validateYear"
			],
			[
				"re",
				"requirement"
			],
			[
				"In",
				"InvalidArgumentError"
			],
			[
				"fir",
				"firstTime"
			],
			[
				"isa",
				"israelTimezone"
			],
			[
				"is",
				"israelTimezone"
			],
			[
				"coun",
				"countryName"
			],
			[
				"call",
				"callback"
			],
			[
				"res",
				"result"
			],
			[
				"cou",
				"countryName"
			],
			[
				"u",
				"util"
			],
			[
				"crea",
				"createdStatusCode"
			],
			[
				"statu",
				"statusCode"
			],
			[
				"user",
				"username"
			],
			[
				"Story",
				"StorySchema"
			],
			[
				"comm",
				"comments"
			],
			[
				"page",
				"page_size"
			],
			[
				"sto",
				"storyColumnQuery"
			],
			[
				"date",
				"dateCreated"
			],
			[
				"au",
				"audio"
			],
			[
				"Sto",
				"StorySchema"
			],
			[
				"up",
				"updateUser"
			],
			[
				"bi",
				"birthday"
			],
			[
				"ge",
				"gender"
			],
			[
				"use",
				"username2"
			],
			[
				"no",
				"notFoundError"
			],
			[
				"in",
				"indexOf"
			],
			[
				"ex",
				"exist"
			],
			[
				"to",
				"token"
			],
			[
				"su",
				"successStatusCode"
			],
			[
				"stat",
				"statusCode"
			],
			[
				"bef",
				"beforeGlobal"
			],
			[
				"be",
				"beforeGlobal"
			],
			[
				"va",
				"validationError"
			],
			[
				"if",
				"ifError"
			],
			[
				"par",
				"params"
			],
			[
				"des",
				"describe"
			],
			[
				"soc",
				"sockjs_chat"
			],
			[
				"cre",
				"createClient"
			],
			[
				"me",
				"messages"
			],
			[
				"get",
				"getElementById"
			],
			[
				"__",
				"__dirname"
			],
			[
				"req",
				"require"
			],
			[
				"for",
				"form"
			],
			[
				"postData",
				"postData"
			],
			[
				"postDataC",
				"postDataChunk"
			],
			[
				"start",
				"startTime"
			],
			[
				"star",
				"startTime"
			],
			[
				"fun",
				"function"
			],
			[
				"requ",
				"requestHandlers"
			],
			[
				"sta",
				"start"
			],
			[
				"writ",
				"write"
			],
			[
				"write",
				"writeHead"
			]
		]
	},
	"buffers":
	[
		{
			"file": "routes/routes-place.js",
			"settings":
			{
				"buffer_size": 15951,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "// dependencies\nvar mongoose = require('mongoose'),\n    User = mongoose.model('User'),\n    ObjectId = mongoose.Types.ObjectId,\n    restify = require('restify'),\n    moment = require('moment'),\n    validator = require('validator'),\n    consts = require(__config_path + \"/consts\");\n\nmodule.exports = function(app) {\n\n    /**\n     * This method for request update user profile\n     *\n     * Params:\n     *  - token:        token authencate\n     *  - fullname:     new user fullname\n     *  - password:     new user password\n     *\n     * Response:\n     *  - return 404 NotFoundError      when token param missing\n     *  - return 403 NotAuthorizedError when token param is missing or not correct\n     *  - return 200 OK                 when change successfully\n     */\n    function updateUser(req, res, next) {\n        // get user model from request\n        var user = req.user;\n        if (validator.isNull(req.params.fullname) && validator.isNull(req.params.password)) {\n            return next(new restify.MissingParameterError('fullname or password cannot be blank'));\n        }\n        if (!validator.isNull(req.params.fullname)) {\n            user.fullname = req.params.fullname;\n        }\n        if (!validator.isNull(req.params.password)) {\n            // when change password, need oldpassword to confirm\n            var oldPassword = req.params.oldpassword;\n            // check old password not null\n            if (validator.isNull(oldPassword)) {\n                return next(new restify.MissingParameterError('Change password, old password cannot be blank'));\n            }\n            // check old password is matched current password\n            if (!user.authenticate(oldPassword)) {\n                return next(new restify.MissingParameterError('Change password, old password not correct'));\n            }\n            // change password\n            user.password = req.params.password;\n        }\n        user.save(function(err, data) {\n            if (err) console.log(err);\n            next.ifError(err);\n            // delete row hashed_password\n            data.hashed_password = undefined;\n            res.send(data);\n            next();\n        });\n    }\n\n    /**\n     * This method for request get user api\n     *\n     * Params:\n     *  - token:        token authencate\n     *\n     * Response:\n     *  - return 404 NotFoundError      when token param missing\n     *  - return 403 NotAuthorizedError when token param is missing or not correct\n     *  - return 200 and User data json when token param is correct and get user data successfully\n     *\n     * @param request\n     * @param response\n     * @param next method\n     */\n    function getUser(req, res, next) {\n        res.send(req.user);\n        next();\n    }\n\n    /**\n     * This method for register new user api\n     *\n     * Params:\n     *  - email:        user email\n     *  - fullname:     user fullname\n     *  - password:     user password\n     *\n     * Response:\n     *  - return 409 InternalError  when email, password param missing or not correct format or email exists\n     *  - return 201 Created        when register user is successfully\n     *\n     * @param request\n     * @param response\n     * @param next method\n     */ \n    function register(req, res, next) {\n        // validator\n        if (validator.isNull(req.params.fullname)) {\n            return next(new restify.MissingParameterError('fullname cannot be blank'));\n        } else if (validator.isNull(req.params.email)) {\n            return next(new restify.MissingParameterError('email cannot be blank'));\n        } else if (validator.isNull(req.params.password)) {\n            return next(new restify.MissingParameterError('password cannot be blank'));\n        } else if (!validator.isEmail(req.params.email)) {\n            return next(new restify.MissingParameterError('email is not correct format'));\n        }\n\n        User.findOne({\n            email: req.params.email.toLowerCase().trim()\n        }, function(err, data) {\n            next.ifError(err);\n            if (data) {\n                return next(new restify.MissingParameterError('email is exists'));\n            } else {\n                // Create a new user model, fill it up and save it to Mongodb\n                var user = new User();\n                user.fullname = req.params.fullname;\n                user.email = req.params.email;\n                user.password = req.params.password;\n                user.token = new ObjectId().toString();\n                user.save(function(err) {\n                    next.ifError(err);\n                    // delete row hashed_password\n                    user.hashed_password = undefined;\n                    // save succesfully, return status code 201 with user json\n                    res.send(201, user);\n                    next();\n                });\n            }\n        });\n    }\n\n    /**\n     * This method for login user api.\n     *\n     * We will check email & password, if it correct, check token. If token exists, return current token\n     * If token not exists, generate a new token\n     *\n     * Method: POST\n     *\n     * Params:\n     *  - email:        user email\n     *  - password:     user password\n     *\n     * Response:\n     *  - return 409 MissingParameterError  when email, password param missing or not correct format\n     *  - return 403 NotAuthorizedError     when password not correct with email\n     *  - return 200 OK                     when success\n     *\n     * @param request\n     * @param response\n     * @param next method\n     */\n    function login(req, res, next) {\n        var email = req.params.email;\n        var password = req.params.password;\n\n        // validator\n        if (validator.isNull(email)) {\n            return next(new restify.MissingParameterError('email cannot be blank'));\n        } else if (validator.isNull(password)) {\n            return next(new restify.MissingParameterError('password cannot be blank'));\n        } else if (!validator.isEmail(email)) {\n            return next(new restify.MissingParameterError('email is not correct format'));\n        }\n\n        // get email and password params and check params exists\n        // query user with email\n        var query = {\n            email: email\n        };\n        User.findOne(query, '+hashed_password', function(err, data) {\n            if (!err) { // query successfully\n                if (data === null) { // not found user\n                    return next(new restify.NotAuthorizedError(\"email doesn't exists\"));\n                } else { // found user\n                    if (!data.authenticate(password)) { // check password is correct?\n                        return next(new restify.NotAuthorizedError(\"password isn't correct\"));\n                    } else {\n                        // email, password are correct, check token\n                        var token = data.token;\n                        if (token && token.length) { // token exists\n                            // delete row hashed_password\n                            data.hashed_password = undefined;\n                            if (data.israel_spent_day === undefined) {\n                                data.israel_spent_day = 0;\n                            }\n                            // return status code 200 with current token\n                            res.send(200, data);\n                        } else {\n                            // generate new token (mongo ObjectId)\n                            token = new ObjectId().toString();\n                            data.token = token;\n                            // save new token\n                            data.save(function(err) {\n                                if (!err) {\n                                    // delete row hashed_password\n                                    data.hashed_password = undefined;\n                                    if (data.israel_spent_day === undefined) {\n                                        data.israel_spent_day = 0;\n                                    }\n                                    // save successfully, return status code 200 with new token\n                                    res.send(200, data);\n                                    return next();\n                                } else {\n                                    return next(err);\n                                }\n                            });\n                        }\n                    }\n                }\n            } else {\n                var errObj = err;\n                if (err.err) {\n                    errObj = err.err;\n                }\n                return next(new restify.InternalError(errObj));\n            }\n        });\n    }\n\n    /**\n     * This method for logout user api\n     *\n     * We will check user id, if exists, reset user token\n     *\n     * Response:\n     *  - return 403 NotAuthorizedError when token param is missing or not correct\n     *  - return 200 OK                 when token param is correct and get user data successfully\n     *\n     * @param request\n     * @param response\n     * @param next method\n     */\n    function logout(req, res, next) {\n        var user = req.user;\n        user.token = null;\n        user.save(function(err) {\n            if (!err) {\n                // saving successfully, send status code 200\n                res.send(200);\n                return next();\n            } else {\n                return next(err);\n            }\n        });\n    }\n\n    // setup route for user\n    app.get(consts.url_user_get, getUser);\n    app.post(consts.url_user_register, register);\n    app.post(consts.url_user_login, login);\n    app.post(consts.url_user_logout, logout);\n    app.put(consts.url_user_update, updateUser);\n};",
			"file": "routes/routes-user.js",
			"file_size": 9960,
			"file_write_time": 130481345181439063,
			"settings":
			{
				"buffer_size": 9709,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 392.0,
		"selected_items":
		[
			[
				"pack",
				"Package Control: Install Package"
			],
			[
				"pac",
				"Package Control: Remove Package"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"Pac",
				"Package Control: Install Package"
			]
		],
		"width": 416.0
	},
	"console":
	{
		"height": 125.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '7183a2d3e96f11eeadd761d777e62404' + 'e330c659d4bb41d3bdf022e94cab3cd0'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/D/NodeJs/iwander/models/user.js",
		"/D/NodeJs/iwander/models/place.js",
		"/C/Users/Thành/Downloads/Compressed/pdfjs-1.0.68-dist/pdfjs/examples/pdfviewer/forms.js",
		"/D/Android/EffortlessEnglish/assets/forms.js",
		"/C/Users/Thành/Downloads/Compressed/pdfjs-1.0.68-dist/pdfjs/examples/pdfview/forms.js",
		"/C/Users/Thành/Downloads/Compressed/pdfjs-1.0.68-dist/pdfjs/examples/text-selection/js/minimal.js",
		"/C/Users/Thành/Downloads/Compressed/pdfjs-1.0.68-dist/pdfjs/examples/text-selection/index.html",
		"/D/Android/EffortlessEnglish/assets/pdfviewer/forms.js",
		"/D/NodeJs/iwander/routes/routes-place.js",
		"/D/Android/EffortlessEnglish/assets/pdfviewer/index.html",
		"/C/Users/Thành/Downloads/Compressed/pdfjs-1.0.68-dist/pdfjs/examples/text-selection/js/jquery.min.js",
		"/C/Users/Thành/Downloads/Compressed/pdfjs-1.0.68-dist/pdfjs/build/pdf.worker.js",
		"/C/Users/Thành/Downloads/Compressed/pdfjs-1.0.68-dist/pdfjs/build/pdf.js",
		"/C/Users/Thành/Downloads/Compressed/pdfjs-1.0.68-dist/pdfjs/examples/pdfview/pdf.worker.js",
		"/C/Users/Thành/Downloads/Compressed/pdfjs-1.0.68-dist/pdfjs/examples/pdfview/pdf.js",
		"/D/Android/PdfViewer/assets/pdfview/forms.js",
		"/D/Android/PdfViewer/assets/pdfview/compatibility.js",
		"/D/Android/PdfViewer/assets/pdfview/pdf.js",
		"/D/Android/PdfViewer/assets/pdfviewer/customview.js",
		"/D/Android/PdfViewer/assets/pdfview/index.html",
		"/D/Android/PdfViewer/assets/pdfviewer/index.html",
		"/D/Android/PdfViewer/assets/pdfview/pdf.worker.js",
		"/C/Users/Thành/Downloads/Compressed/pdfjs-1.0.68-dist/web/viewer.js",
		"/C/Users/Thành/Downloads/Compressed/pdfjs-1.0.68-dist/build/index.html",
		"/C/Users/Thành/Downloads/Compressed/pdfobject.js/pdfobject.js",
		"/C/Users/Thành/Downloads/Compressed/pdfjs-1.0.68-dist/pdfjs/examples/acroforms/forms.js",
		"/C/Users/Thành/Downloads/Compressed/pdfjs-1.0.68-dist/pdfjs/examples/acroforms/index.html",
		"/C/Users/Thành/Downloads/Compressed/pdfjs-1.0.68-dist/pdfjs/examples/text-only/index.html",
		"/C/Users/Thành/Downloads/Compressed/pdfjs-1.0.68-dist/pdfjs/examples/text-only/pdf2svg.js",
		"/C/Users/Thành/Downloads/Compressed/pdfjs-1.0.68-dist/pdfjs/src/worker_loader.js",
		"/D/Android/PdfViewer/assets/web/viewer.js",
		"/D/Android/EffortlessEnglish/assets/pdfviewer/customview.js",
		"/D/Android/EffortlessEnglish/assets/pdfviewer/pdffile.js",
		"/D/Android/ubox-ad/Timboxapp/src/com/cnc/ubox/utils/FileUtils.java",
		"/D/Android/PdfViewer/assets/pdfviewer/pdffile.js",
		"/D/Android/YouTubeAndroidPlayerApi-1.0.0/sample/src/com/examples/youtubeapidemo/FragmentDemoActivity.java",
		"/D/Android/YouTubeAndroidPlayerApi-1.0.0/sample/res/layout/fragments_demo.xml",
		"/D/Android/YouTubeAndroidPlayerApi-1.0.0/sample/src/com/examples/youtubeapidemo/YouTubeFailureRecoveryActivity.java",
		"/D/Android/YouTubeAndroidPlayerApi-1.0.0/sample/res/values/strings.xml",
		"/D/Android/YouTubeAndroidPlayerApi-1.0.0/sample/src/com/examples/youtubeapidemo/DeveloperKey.java",
		"/D/Android/PdfViewer/assets/pdfviewer/pdf.js",
		"/D/Android/PdfViewer/assets/pdfviewer/pdf.worker.js",
		"/D/Android/ubox-ad/Timboxapp/src/com/cnc/ubox/activity/createtalk/CreateTalkActivity.java",
		"/D/Android/YouTubeAndroidPlayerApi-1.0.0/sample/AndroidManifest.xml",
		"/D/NodeJs/iwander/routes/routes-user.js",
		"/C/Users/Thành/Downloads/Compressed/Java Example for SensorCloud/src/com/sensorcloud/Requests.java",
		"/C/Users/Thành/Downloads/Compressed/Java Example for SensorCloud/src/UploadToSensorCloud.java",
		"/C/Users/Thành/Downloads/Compressed/Java Example for SensorCloud/src/com/sensorcloud/Device.java",
		"/D/NodeJs/iwander/server.js",
		"/D/NodeJs/iwander/test/test-place.js",
		"/D/NodeJs/iwander/test/test-user.js",
		"/C/Users/Thành/Downloads/Compressed/Java Example for SensorCloud/src/com/sensorcloud/XDRInStream.java",
		"/C/Users/Thành/Downloads/Compressed/LocationUpdates/src/com/example/android/location/MainActivity.java",
		"/D/Android/ubox-ad/Timboxapp/src/com/cnc/ubox/activity/createtalk/CreateTalkCameraActivity.java",
		"/D/NodeJs/iwander/config/authorization.js",
		"/D/NodeJs/iwander/config/consts.js",
		"/D/NodeJs/iwander/libs/factories.js",
		"/D/Android/ubox-ad/Timboxapp/src/com/cnc/ubox/utils/UboxDisplayImageOptions.java",
		"/C/Users/Thành/Downloads/Compressed/LocationUpdates/res/values/strings.xml",
		"/C/Users/Thành/Downloads/Compressed/LocationUpdates/src/com/example/android/location/LocationUtils.java",
		"/C/Users/Thành/Downloads/Compressed/LocationUpdates/src/com/example/android/location/LocationServiceErrorMessages.java",
		"/D/NodeJs/iwander/config/config.js",
		"/D/NodeJs/iwander/routes.js",
		"/D/NodeJs/iwander/configs/consts.js",
		"/D/NodeJs/iwander/configs/server-restify.js",
		"/D/NodeJs/iwander/config/server-restify.js",
		"/D/NodeJs/iwander/configs/configs.js",
		"/D/NodeJs/iwander/node_modules/rekuire/lib/main.js",
		"/D/NodeJs/iwander/package.json",
		"/C/Program Files (x86)/Heroku/lib/heroku/updater.rb",
		"/D/NodeJs/iwander/libs/utils.js",
		"/D/NodeJs/iwander/node_modules/rekuire/lib/helpers/scan.js",
		"/D/NodeJs/iwander/node_modules/rekuire/lib/helpers/isString.js",
		"/home/thanhle/NodeJs/iwander/server.js",
		"/home/thanhle/NodeJs/iwander/config/config.js",
		"/home/thanhle/NodeJs/iwander/test/test-place.js",
		"/home/thanhle/NodeJs/iwander/models/user.js",
		"/home/thanhle/NodeJs/iwander/routes/routes-place.js",
		"/home/thanhle/NodeJs/iwander/models/place.js",
		"/home/thanhle/NodeJs/iwander/package.json",
		"/home/thanhle/NodeJs/iwander/test/test-user.js",
		"/home/thanhle/NodeJs/iwander/config/server-restify.js",
		"/home/thanhle/NodeJs/iwander/routes/routes-user.js",
		"/home/thanhle/NodeJs/iwander/libs/factories.js",
		"/home/thanhle/NodeJs/iwander/Procfile",
		"/home/thanhle/NodeJs/iwander/config/consts.js",
		"/home/thanhle/NodeJs/iwander/libs/utils.js",
		"/home/thanhle/NodeJs/iwander/test/test-story.js",
		"/home/thanhle/NodeJs/restful-nodejs/models/user.js",
		"/home/thanhle/NodeJs/restful-nodejs/config/authorization.js",
		"/home/thanhle/NodeJs/restful-nodejs/routes/routes-user.js",
		"/home/thanhle/NodeJs/restful-nodejs/test/test-user.js",
		"/home/thanhle/NodeJs/restful-nodejs/test/test-story.js",
		"/home/thanhle/NodeJs/restful-nodejs/models/story.js",
		"/home/thanhle/NodeJs/restful-nodejs/libs/factories.js",
		"/home/thanhle/NodeJs/restful-nodejs/routes/routes-story.js",
		"/home/thanhle/nodejs/restful-nodejs/routes/routes-user.js",
		"/home/thanhle/nodejs/restful-nodejs/libs/factories.js",
		"/home/thanhle/nodejs/restful-nodejs/config/authorization.js",
		"/home/thanhle/nodejs/restful-nodejs/routes/routes-story.js",
		"/home/thanhle/nodejs/restful-nodejs/test/test-user.js",
		"/home/thanhle/nodejs/restful-nodejs/config/consts.js",
		"/home/thanhle/nodejs/restful-nodejs/models/story.js",
		"/home/thanhle/nodejs/restful-nodejs/test/globalTest.js",
		"/home/thanhle/nodejs/restful-nodejs/test/test-story.js",
		"/home/thanhle/nodejs/restful-nodejs/config/server-restify.js",
		"/home/thanhle/nodejs/restful-nodejs/models/user.js",
		"/home/thanhle/nodejs/restful-nodejs/RestError.md",
		"/home/thanhle/nodejs/restful-nodejs/package.json",
		"/home/thanhle/nodejs/restful-nodejs/config/config.js",
		"/home/thanhle/nodejs/restful-nodejs/test/global.js",
		"/home/thanhle/nodejs/restful-nodejs/libs/utils.js",
		"~/nodejs/restful/models/user.js",
		"~/nodejs/restful/config/authorization.js",
		"~/nodejs/restful/config/url.js",
		"~/nodejs/restful/RestError.md",
		"~/nodejs/restful/test/test-user.js",
		"~/nodejs/restful/routes/routes-user.js",
		"~/nodejs/restful/test/beforeGlobal.js",
		"~/nodejs/restful/config/config.js",
		"~/nodejs/restful/config/server-restify.js",
		"~/nodejs/restful/test/url-config.js",
		"~/nodejs/restful/test/globalBefore.js",
		"~/nodejs/restful/test/01-start-server.js",
		"~/nodejs/restful/server.js",
		"~/nodejs/restful/routes.js",
		"~/nodejs/restful/routes/routes.js",
		"~/nodejs/restful/upload.js"
	],
	"find":
	{
		"height": 26.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"TextLayerBuilder",
			"promise(",
			"render(",
			"promise",
			"promise(",
			"renderPage(",
			" renderPage(",
			"renderPage(",
			"renderPage",
			"this.pages",
			"this.pages[",
			"this.pages",
			".view[",
			"initialize",
			"presentationModeInitialize",
			"this.container",
			"this.pages",
			"this.container",
			"scaleSelect",
			"viewport.widt",
			"setupForm",
			"getAnnotations",
			"viewport",
			" load(",
			"load(",
			"getPdfHelloWorld",
			"setS",
			"UNKNOWN_SCALE",
			"isValidUrl",
			"user_column_query",
			"config.root",
			"validator",
			"for",
			"getListPlace",
			"v",
			"restful",
			"username",
			"console.log",
			"console",
			"url.",
			"console",
			"lng",
			"urlConfig.",
			"indexOf",
			"UserSchema",
			"Factory.build",
			"url.",
			"contents",
			"image",
			"ObjectId",
			"url_user_logout",
			"url-config",
			"urlConfig.",
			"config.",
			"urlConfig",
			"restify",
			"202",
			"successStatusCode",
			"done\nsuccessStatusCode",
			"config",
			"restify.MissingParameterError.code",
			"before",
			"findOne",
			"lastest"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"iwander",
			"fullname",
			"consts.",
			"Factory.create",
			"consts.",
			"host + urlConfig.",
			"urlConfig.",
			"config",
			"createdStatusCode",
			"urlConfig",
			"missingError",
			"*"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "routes/routes-place.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 15951,
						"regions":
						{
						},
						"selection":
						[
							[
								9733,
								9872
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4144.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "routes/routes-user.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9709,
						"regions":
						{
						},
						"selection":
						[
							[
								3134,
								3134
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1238.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 26.0
	},
	"input":
	{
		"height": 31.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"project": "iwander.sublime-project",
	"replace":
	{
		"height": 48.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
			[
				"",
				"~/nodejs/helloworld.js"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"selected_items":
		[
			[
				"",
				"D:\\NodeJs\\effortlessenglish\\ee.sublime-workspace"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 241.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
